// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServiceInitConfigurationClient is the client API for ServiceInitConfiguration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceInitConfigurationClient interface {
	ConfigureAllModules(ctx context.Context, in *ConfigurationInfo, opts ...grpc.CallOption) (*IngestConfirmation, error)
	RequestStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error)
}

type serviceInitConfigurationClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceInitConfigurationClient(cc grpc.ClientConnInterface) ServiceInitConfigurationClient {
	return &serviceInitConfigurationClient{cc}
}

func (c *serviceInitConfigurationClient) ConfigureAllModules(ctx context.Context, in *ConfigurationInfo, opts ...grpc.CallOption) (*IngestConfirmation, error) {
	out := new(IngestConfirmation)
	err := c.cc.Invoke(ctx, "/statuscheck.ServiceInitConfiguration/ConfigureAllModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceInitConfigurationClient) RequestStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusReply, error) {
	out := new(StatusReply)
	err := c.cc.Invoke(ctx, "/statuscheck.ServiceInitConfiguration/RequestStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceInitConfigurationServer is the server API for ServiceInitConfiguration service.
// All implementations must embed UnimplementedServiceInitConfigurationServer
// for forward compatibility
type ServiceInitConfigurationServer interface {
	ConfigureAllModules(context.Context, *ConfigurationInfo) (*IngestConfirmation, error)
	RequestStatus(context.Context, *StatusRequest) (*StatusReply, error)
	mustEmbedUnimplementedServiceInitConfigurationServer()
}

// UnimplementedServiceInitConfigurationServer must be embedded to have forward compatible implementations.
type UnimplementedServiceInitConfigurationServer struct {
}

func (UnimplementedServiceInitConfigurationServer) ConfigureAllModules(context.Context, *ConfigurationInfo) (*IngestConfirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureAllModules not implemented")
}
func (UnimplementedServiceInitConfigurationServer) RequestStatus(context.Context, *StatusRequest) (*StatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestStatus not implemented")
}
func (UnimplementedServiceInitConfigurationServer) mustEmbedUnimplementedServiceInitConfigurationServer() {
}

// UnsafeServiceInitConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceInitConfigurationServer will
// result in compilation errors.
type UnsafeServiceInitConfigurationServer interface {
	mustEmbedUnimplementedServiceInitConfigurationServer()
}

func RegisterServiceInitConfigurationServer(s grpc.ServiceRegistrar, srv ServiceInitConfigurationServer) {
	s.RegisterService(&_ServiceInitConfiguration_serviceDesc, srv)
}

func _ServiceInitConfiguration_ConfigureAllModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInitConfigurationServer).ConfigureAllModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statuscheck.ServiceInitConfiguration/ConfigureAllModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInitConfigurationServer).ConfigureAllModules(ctx, req.(*ConfigurationInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceInitConfiguration_RequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceInitConfigurationServer).RequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statuscheck.ServiceInitConfiguration/RequestStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceInitConfigurationServer).RequestStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceInitConfiguration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "statuscheck.ServiceInitConfiguration",
	HandlerType: (*ServiceInitConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureAllModules",
			Handler:    _ServiceInitConfiguration_ConfigureAllModules_Handler,
		},
		{
			MethodName: "RequestStatus",
			Handler:    _ServiceInitConfiguration_RequestStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/statuscheck.proto",
}
