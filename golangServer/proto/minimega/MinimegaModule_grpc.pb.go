// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package minimega

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MinimegaServiceClient is the client API for MinimegaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinimegaServiceClient interface {
	Configure(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Confirmation, error)
	RequestDetailedHealthCheck(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*DetailedEvaluation, error)
	UpdateConfiguration(ctx context.Context, in *ConfigurationUpdate, opts ...grpc.CallOption) (*Confirmation, error)
	RunCustomCommand(ctx context.Context, in *CustomCommand, opts ...grpc.CallOption) (*Confirmation, error)
}

type minimegaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMinimegaServiceClient(cc grpc.ClientConnInterface) MinimegaServiceClient {
	return &minimegaServiceClient{cc}
}

func (c *minimegaServiceClient) Configure(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/minimegamodule.MinimegaService/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minimegaServiceClient) RequestDetailedHealthCheck(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*DetailedEvaluation, error) {
	out := new(DetailedEvaluation)
	err := c.cc.Invoke(ctx, "/minimegamodule.MinimegaService/RequestDetailedHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minimegaServiceClient) UpdateConfiguration(ctx context.Context, in *ConfigurationUpdate, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/minimegamodule.MinimegaService/UpdateConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minimegaServiceClient) RunCustomCommand(ctx context.Context, in *CustomCommand, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/minimegamodule.MinimegaService/RunCustomCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinimegaServiceServer is the server API for MinimegaService service.
// All implementations must embed UnimplementedMinimegaServiceServer
// for forward compatibility
type MinimegaServiceServer interface {
	Configure(context.Context, *Configuration) (*Confirmation, error)
	RequestDetailedHealthCheck(context.Context, *StatusRequest) (*DetailedEvaluation, error)
	UpdateConfiguration(context.Context, *ConfigurationUpdate) (*Confirmation, error)
	RunCustomCommand(context.Context, *CustomCommand) (*Confirmation, error)
	mustEmbedUnimplementedMinimegaServiceServer()
}

// UnimplementedMinimegaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMinimegaServiceServer struct {
}

func (UnimplementedMinimegaServiceServer) Configure(context.Context, *Configuration) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedMinimegaServiceServer) RequestDetailedHealthCheck(context.Context, *StatusRequest) (*DetailedEvaluation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDetailedHealthCheck not implemented")
}
func (UnimplementedMinimegaServiceServer) UpdateConfiguration(context.Context, *ConfigurationUpdate) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfiguration not implemented")
}
func (UnimplementedMinimegaServiceServer) RunCustomCommand(context.Context, *CustomCommand) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCustomCommand not implemented")
}
func (UnimplementedMinimegaServiceServer) mustEmbedUnimplementedMinimegaServiceServer() {}

// UnsafeMinimegaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinimegaServiceServer will
// result in compilation errors.
type UnsafeMinimegaServiceServer interface {
	mustEmbedUnimplementedMinimegaServiceServer()
}

func RegisterMinimegaServiceServer(s grpc.ServiceRegistrar, srv MinimegaServiceServer) {
	s.RegisterService(&_MinimegaService_serviceDesc, srv)
}

func _MinimegaService_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinimegaServiceServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minimegamodule.MinimegaService/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinimegaServiceServer).Configure(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinimegaService_RequestDetailedHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinimegaServiceServer).RequestDetailedHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minimegamodule.MinimegaService/RequestDetailedHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinimegaServiceServer).RequestDetailedHealthCheck(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinimegaService_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinimegaServiceServer).UpdateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minimegamodule.MinimegaService/UpdateConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinimegaServiceServer).UpdateConfiguration(ctx, req.(*ConfigurationUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinimegaService_RunCustomCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinimegaServiceServer).RunCustomCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minimegamodule.MinimegaService/RunCustomCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinimegaServiceServer).RunCustomCommand(ctx, req.(*CustomCommand))
	}
	return interceptor(ctx, in, info, handler)
}

var _MinimegaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "minimegamodule.MinimegaService",
	HandlerType: (*MinimegaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _MinimegaService_Configure_Handler,
		},
		{
			MethodName: "RequestDetailedHealthCheck",
			Handler:    _MinimegaService_RequestDetailedHealthCheck_Handler,
		},
		{
			MethodName: "UpdateConfiguration",
			Handler:    _MinimegaService_UpdateConfiguration_Handler,
		},
		{
			MethodName: "RunCustomCommand",
			Handler:    _MinimegaService_RunCustomCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/minimega/MinimegaModule.proto",
}
