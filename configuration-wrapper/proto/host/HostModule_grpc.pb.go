// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package modules

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HostServiceClient is the client API for HostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostServiceClient interface {
	Configure(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Confirmation, error)
	RequestDetailedHealthCheck(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*DetailedEvaluation, error)
	UpdateConfiguration(ctx context.Context, in *ConfigurationUpdate, opts ...grpc.CallOption) (*Confirmation, error)
	RunCustomCommand(ctx context.Context, in *CustomCommand, opts ...grpc.CallOption) (*Confirmation, error)
}

type hostServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHostServiceClient(cc grpc.ClientConnInterface) HostServiceClient {
	return &hostServiceClient{cc}
}

func (c *hostServiceClient) Configure(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/hostmodule.HostService/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) RequestDetailedHealthCheck(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*DetailedEvaluation, error) {
	out := new(DetailedEvaluation)
	err := c.cc.Invoke(ctx, "/hostmodule.HostService/RequestDetailedHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) UpdateConfiguration(ctx context.Context, in *ConfigurationUpdate, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/hostmodule.HostService/UpdateConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostServiceClient) RunCustomCommand(ctx context.Context, in *CustomCommand, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/hostmodule.HostService/RunCustomCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostServiceServer is the server API for HostService service.
// All implementations must embed UnimplementedHostServiceServer
// for forward compatibility
type HostServiceServer interface {
	Configure(context.Context, *Configuration) (*Confirmation, error)
	RequestDetailedHealthCheck(context.Context, *StatusRequest) (*DetailedEvaluation, error)
	UpdateConfiguration(context.Context, *ConfigurationUpdate) (*Confirmation, error)
	RunCustomCommand(context.Context, *CustomCommand) (*Confirmation, error)
	mustEmbedUnimplementedHostServiceServer()
}

// UnimplementedHostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHostServiceServer struct {
}

func (UnimplementedHostServiceServer) Configure(context.Context, *Configuration) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedHostServiceServer) RequestDetailedHealthCheck(context.Context, *StatusRequest) (*DetailedEvaluation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestDetailedHealthCheck not implemented")
}
func (UnimplementedHostServiceServer) UpdateConfiguration(context.Context, *ConfigurationUpdate) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfiguration not implemented")
}
func (UnimplementedHostServiceServer) RunCustomCommand(context.Context, *CustomCommand) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCustomCommand not implemented")
}
func (UnimplementedHostServiceServer) mustEmbedUnimplementedHostServiceServer() {}

// UnsafeHostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostServiceServer will
// result in compilation errors.
type UnsafeHostServiceServer interface {
	mustEmbedUnimplementedHostServiceServer()
}

func RegisterHostServiceServer(s grpc.ServiceRegistrar, srv HostServiceServer) {
	s.RegisterService(&_HostService_serviceDesc, srv)
}

func _HostService_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hostmodule.HostService/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).Configure(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_RequestDetailedHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).RequestDetailedHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hostmodule.HostService/RequestDetailedHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).RequestDetailedHealthCheck(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_UpdateConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).UpdateConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hostmodule.HostService/UpdateConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).UpdateConfiguration(ctx, req.(*ConfigurationUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _HostService_RunCustomCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostServiceServer).RunCustomCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hostmodule.HostService/RunCustomCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostServiceServer).RunCustomCommand(ctx, req.(*CustomCommand))
	}
	return interceptor(ctx, in, info, handler)
}

var _HostService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hostmodule.HostService",
	HandlerType: (*HostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _HostService_Configure_Handler,
		},
		{
			MethodName: "RequestDetailedHealthCheck",
			Handler:    _HostService_RequestDetailedHealthCheck_Handler,
		},
		{
			MethodName: "UpdateConfiguration",
			Handler:    _HostService_UpdateConfiguration_Handler,
		},
		{
			MethodName: "RunCustomCommand",
			Handler:    _HostService_RunCustomCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/host/HostModule.proto",
}
