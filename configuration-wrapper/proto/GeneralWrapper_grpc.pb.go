// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GeneralWrapperServiceClient is the client API for GeneralWrapperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneralWrapperServiceClient interface {
	RequestModuleContext(ctx context.Context, in *ContextRequest, opts ...grpc.CallOption) (*ModuleContext, error)
	RequestGeneralHealthCheck(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Evaluation, error)
	RunSystemCommand(ctx context.Context, in *SystemCommand, opts ...grpc.CallOption) (*Confirmation, error)
}

type generalWrapperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneralWrapperServiceClient(cc grpc.ClientConnInterface) GeneralWrapperServiceClient {
	return &generalWrapperServiceClient{cc}
}

func (c *generalWrapperServiceClient) RequestModuleContext(ctx context.Context, in *ContextRequest, opts ...grpc.CallOption) (*ModuleContext, error) {
	out := new(ModuleContext)
	err := c.cc.Invoke(ctx, "/generalwrapper.GeneralWrapperService/RequestModuleContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalWrapperServiceClient) RequestGeneralHealthCheck(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*Evaluation, error) {
	out := new(Evaluation)
	err := c.cc.Invoke(ctx, "/generalwrapper.GeneralWrapperService/RequestGeneralHealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalWrapperServiceClient) RunSystemCommand(ctx context.Context, in *SystemCommand, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/generalwrapper.GeneralWrapperService/RunSystemCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneralWrapperServiceServer is the server API for GeneralWrapperService service.
// All implementations must embed UnimplementedGeneralWrapperServiceServer
// for forward compatibility
type GeneralWrapperServiceServer interface {
	RequestModuleContext(context.Context, *ContextRequest) (*ModuleContext, error)
	RequestGeneralHealthCheck(context.Context, *StatusRequest) (*Evaluation, error)
	RunSystemCommand(context.Context, *SystemCommand) (*Confirmation, error)
	mustEmbedUnimplementedGeneralWrapperServiceServer()
}

// UnimplementedGeneralWrapperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGeneralWrapperServiceServer struct {
}

func (UnimplementedGeneralWrapperServiceServer) RequestModuleContext(context.Context, *ContextRequest) (*ModuleContext, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestModuleContext not implemented")
}
func (UnimplementedGeneralWrapperServiceServer) RequestGeneralHealthCheck(context.Context, *StatusRequest) (*Evaluation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestGeneralHealthCheck not implemented")
}
func (UnimplementedGeneralWrapperServiceServer) RunSystemCommand(context.Context, *SystemCommand) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunSystemCommand not implemented")
}
func (UnimplementedGeneralWrapperServiceServer) mustEmbedUnimplementedGeneralWrapperServiceServer() {}

// UnsafeGeneralWrapperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneralWrapperServiceServer will
// result in compilation errors.
type UnsafeGeneralWrapperServiceServer interface {
	mustEmbedUnimplementedGeneralWrapperServiceServer()
}

func RegisterGeneralWrapperServiceServer(s grpc.ServiceRegistrar, srv GeneralWrapperServiceServer) {
	s.RegisterService(&_GeneralWrapperService_serviceDesc, srv)
}

func _GeneralWrapperService_RequestModuleContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralWrapperServiceServer).RequestModuleContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generalwrapper.GeneralWrapperService/RequestModuleContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralWrapperServiceServer).RequestModuleContext(ctx, req.(*ContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralWrapperService_RequestGeneralHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralWrapperServiceServer).RequestGeneralHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generalwrapper.GeneralWrapperService/RequestGeneralHealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralWrapperServiceServer).RequestGeneralHealthCheck(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneralWrapperService_RunSystemCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemCommand)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneralWrapperServiceServer).RunSystemCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generalwrapper.GeneralWrapperService/RunSystemCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneralWrapperServiceServer).RunSystemCommand(ctx, req.(*SystemCommand))
	}
	return interceptor(ctx, in, info, handler)
}

var _GeneralWrapperService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "generalwrapper.GeneralWrapperService",
	HandlerType: (*GeneralWrapperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestModuleContext",
			Handler:    _GeneralWrapperService_RequestModuleContext_Handler,
		},
		{
			MethodName: "RequestGeneralHealthCheck",
			Handler:    _GeneralWrapperService_RequestGeneralHealthCheck_Handler,
		},
		{
			MethodName: "RunSystemCommand",
			Handler:    _GeneralWrapperService_RunSystemCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/GeneralWrapper.proto",
}
